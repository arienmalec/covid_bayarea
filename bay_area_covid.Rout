
R version 3.6.3 (2020-02-29) -- "Holding the Windsock"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> library(readr)
> library(ggplot2)
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(ggthemes)
> 
> 
> assign_periods <- function(d) {
+ 	mutate(d, period = case_when (
+ 		date < "2020-03-16" ~ "Mar 1H",
+ 		date >= "2020-03-16" & date < "2020-04-01" ~ "Mar 2H",
+ 		date >= "2020-04-01" & date < "2020-04-16" ~ "Apr 1H",
+ 		date >= "2020-04-16" & date < "2020-05-01" ~ "Apr 2H",
+ 		TRUE				~ "ERROR"))
+ }
> 
> six_counties <-
+ 	c("Santa Clara", "San Francisco","Marin",
+ 	"Alameda","Contra Costa", "San Mateo")
> 
> sixcty <-
+ 	read_csv("./covid-19-data/us-counties.csv") %>%
+ 	filter(state == "California") %>%
+ 	filter(county %in% six_counties) %>%
+ 	filter(date >= "2020-03-01") %>%
+ 	assign_periods %>%
+ 	select(date, period, cases, deaths, county)
Parsed with column specification:
cols(
  date = col_date(format = ""),
  county = col_character(),
  state = col_character(),
  fips = col_character(),
  cases = col_double(),
  deaths = col_double()
)
> factor(sixcty$period)
  [1] Mar 1H Mar 1H Mar 1H Mar 1H Mar 1H Mar 1H Mar 1H Mar 1H Mar 1H Mar 1H
 [11] Mar 1H Mar 1H Mar 1H Mar 1H Mar 1H Mar 1H Mar 1H Mar 1H Mar 1H Mar 1H
 [21] Mar 1H Mar 1H Mar 1H Mar 1H Mar 1H Mar 1H Mar 1H Mar 1H Mar 1H Mar 1H
 [31] Mar 1H Mar 1H Mar 1H Mar 1H Mar 1H Mar 1H Mar 1H Mar 1H Mar 1H Mar 1H
 [41] Mar 1H Mar 1H Mar 1H Mar 1H Mar 1H Mar 1H Mar 1H Mar 1H Mar 1H Mar 1H
 [51] Mar 1H Mar 1H Mar 1H Mar 1H Mar 1H Mar 1H Mar 1H Mar 1H Mar 1H Mar 1H
 [61] Mar 1H Mar 1H Mar 1H Mar 1H Mar 1H Mar 1H Mar 1H Mar 1H Mar 1H Mar 1H
 [71] Mar 1H Mar 1H Mar 1H Mar 1H Mar 1H Mar 1H Mar 1H Mar 1H Mar 1H Mar 1H
 [81] Mar 1H Mar 1H Mar 1H Mar 1H Mar 1H Mar 1H Mar 1H Mar 2H Mar 2H Mar 2H
 [91] Mar 2H Mar 2H Mar 2H Mar 2H Mar 2H Mar 2H Mar 2H Mar 2H Mar 2H Mar 2H
[101] Mar 2H Mar 2H Mar 2H Mar 2H Mar 2H Mar 2H Mar 2H Mar 2H Mar 2H Mar 2H
[111] Mar 2H Mar 2H Mar 2H Mar 2H Mar 2H Mar 2H Mar 2H Mar 2H Mar 2H Mar 2H
[121] Mar 2H Mar 2H Mar 2H Mar 2H Mar 2H Mar 2H Mar 2H Mar 2H Mar 2H Mar 2H
[131] Mar 2H Mar 2H Mar 2H Mar 2H Mar 2H Mar 2H Mar 2H Mar 2H Mar 2H Mar 2H
[141] Mar 2H Mar 2H Mar 2H Mar 2H Mar 2H Mar 2H Mar 2H Mar 2H Mar 2H Mar 2H
[151] Mar 2H Mar 2H Mar 2H Mar 2H Mar 2H Mar 2H Mar 2H Mar 2H Mar 2H Mar 2H
[161] Mar 2H Mar 2H Mar 2H Mar 2H Mar 2H Mar 2H Mar 2H Mar 2H Mar 2H Mar 2H
[171] Mar 2H Mar 2H Mar 2H Mar 2H Mar 2H Mar 2H Mar 2H Mar 2H Mar 2H Mar 2H
[181] Mar 2H Mar 2H Mar 2H Apr 1H Apr 1H Apr 1H Apr 1H Apr 1H Apr 1H Apr 1H
[191] Apr 1H Apr 1H Apr 1H Apr 1H Apr 1H Apr 1H Apr 1H Apr 1H Apr 1H Apr 1H
[201] Apr 1H Apr 1H Apr 1H Apr 1H Apr 1H Apr 1H Apr 1H Apr 1H Apr 1H Apr 1H
[211] Apr 1H Apr 1H Apr 1H Apr 1H Apr 1H Apr 1H Apr 1H Apr 1H Apr 1H Apr 1H
[221] Apr 1H Apr 1H Apr 1H Apr 1H Apr 1H Apr 1H Apr 1H Apr 1H Apr 1H Apr 1H
[231] Apr 1H Apr 1H Apr 1H Apr 1H Apr 1H Apr 1H Apr 1H Apr 1H Apr 1H Apr 1H
[241] Apr 1H Apr 1H Apr 1H Apr 1H Apr 1H Apr 1H Apr 1H Apr 1H Apr 1H Apr 1H
[251] Apr 1H Apr 1H Apr 1H Apr 1H Apr 1H Apr 1H Apr 1H Apr 1H Apr 1H Apr 1H
[261] Apr 1H Apr 1H Apr 1H Apr 1H Apr 1H Apr 1H Apr 1H Apr 1H Apr 1H Apr 1H
[271] Apr 1H Apr 1H Apr 1H Apr 2H Apr 2H Apr 2H Apr 2H Apr 2H Apr 2H Apr 2H
[281] Apr 2H Apr 2H Apr 2H Apr 2H Apr 2H Apr 2H Apr 2H Apr 2H Apr 2H Apr 2H
[291] Apr 2H Apr 2H Apr 2H Apr 2H Apr 2H Apr 2H Apr 2H Apr 2H Apr 2H Apr 2H
[301] Apr 2H Apr 2H Apr 2H Apr 2H Apr 2H Apr 2H Apr 2H Apr 2H Apr 2H Apr 2H
[311] Apr 2H Apr 2H Apr 2H Apr 2H Apr 2H Apr 2H Apr 2H Apr 2H Apr 2H Apr 2H
[321] Apr 2H Apr 2H Apr 2H Apr 2H Apr 2H Apr 2H Apr 2H Apr 2H Apr 2H Apr 2H
[331] Apr 2H Apr 2H Apr 2H Apr 2H Apr 2H Apr 2H Apr 2H Apr 2H Apr 2H Apr 2H
[341] Apr 2H Apr 2H Apr 2H Apr 2H Apr 2H Apr 2H Apr 2H Apr 2H Apr 2H Apr 2H
[351] Apr 2H Apr 2H Apr 2H Apr 2H Apr 2H Apr 2H Apr 2H Apr 2H Apr 2H Apr 2H
[361] Apr 2H Apr 2H Apr 2H ERROR  ERROR  ERROR  ERROR  ERROR  ERROR  ERROR 
[371] ERROR  ERROR  ERROR  ERROR  ERROR  ERROR  ERROR  ERROR  ERROR  ERROR 
[381] ERROR 
Levels: Apr 1H Apr 2H ERROR Mar 1H Mar 2H
> 
> nyc <-
+ 	read_csv("./covid-19-data/us-counties.csv") %>%
+ 	filter(county == "New York City") %>%
+ 	filter(date >= "2020-03-01") %>%
+ 	assign_periods %>%
+ 	select(date, period, cases, deaths, county)
Parsed with column specification:
cols(
  date = col_date(format = ""),
  county = col_character(),
  state = col_character(),
  fips = col_character(),
  cases = col_double(),
  deaths = col_double()
)
> 
> nyc$new_cases <- nyc$cases - lag(nyc$cases, default=0)
> nyc$new_deaths <- nyc$deaths - lag(nyc$deaths, default=0)
> factor(nyc$period)
 [1] Mar 1H Mar 1H Mar 1H Mar 1H Mar 1H Mar 1H Mar 1H Mar 1H Mar 1H Mar 1H
[11] Mar 1H Mar 1H Mar 1H Mar 1H Mar 1H Mar 2H Mar 2H Mar 2H Mar 2H Mar 2H
[21] Mar 2H Mar 2H Mar 2H Mar 2H Mar 2H Mar 2H Mar 2H Mar 2H Mar 2H Mar 2H
[31] Mar 2H Apr 1H Apr 1H Apr 1H Apr 1H Apr 1H Apr 1H Apr 1H Apr 1H Apr 1H
[41] Apr 1H Apr 1H Apr 1H Apr 1H Apr 1H Apr 1H Apr 2H Apr 2H Apr 2H Apr 2H
[51] Apr 2H Apr 2H Apr 2H Apr 2H Apr 2H Apr 2H Apr 2H Apr 2H Apr 2H Apr 2H
[61] Apr 2H ERROR  ERROR  ERROR 
Levels: Apr 1H Apr 2H ERROR Mar 1H Mar 2H
> 
> la <- 
+ 	read_csv("./covid-19-data/us-counties.csv") %>%
+ 	filter(county == "Los Angeles") %>%
+ 	filter(date >= "2020-03-01") %>%
+ 	assign_periods %>%
+ 	select(date, period, cases, deaths, county)
Parsed with column specification:
cols(
  date = col_date(format = ""),
  county = col_character(),
  state = col_character(),
  fips = col_character(),
  cases = col_double(),
  deaths = col_double()
)
> 
> 
> la$new_cases <- la$cases - lag(la$cases, default=0)
> la$new_deaths <- la$deaths - lag(la$deaths, default=0)
> factor(la$period)
 [1] Mar 1H Mar 1H Mar 1H Mar 1H Mar 1H Mar 1H Mar 1H Mar 1H Mar 1H Mar 1H
[11] Mar 1H Mar 1H Mar 1H Mar 1H Mar 1H Mar 2H Mar 2H Mar 2H Mar 2H Mar 2H
[21] Mar 2H Mar 2H Mar 2H Mar 2H Mar 2H Mar 2H Mar 2H Mar 2H Mar 2H Mar 2H
[31] Mar 2H Apr 1H Apr 1H Apr 1H Apr 1H Apr 1H Apr 1H Apr 1H Apr 1H Apr 1H
[41] Apr 1H Apr 1H Apr 1H Apr 1H Apr 1H Apr 1H Apr 2H Apr 2H Apr 2H Apr 2H
[51] Apr 2H Apr 2H Apr 2H Apr 2H Apr 2H Apr 2H Apr 2H Apr 2H Apr 2H Apr 2H
[61] Apr 2H ERROR  ERROR  ERROR 
Levels: Apr 1H Apr 2H ERROR Mar 1H Mar 2H
> 
> 
> all_six_cty <- sixcty %>%
+     group_by(date, period) %>%
+     summarize(cases=sum(cases),deaths=sum(deaths)) %>%
+     mutate(county = "Bay Area Six-County Region")
> 
> all_six_cty$new_cases <- all_six_cty$cases - lag(all_six_cty$cases, default=0)
> all_six_cty$new_deaths <- all_six_cty$deaths - lag(all_six_cty$deaths, default=0)
> 
> 
> nyc_la_bayarea <- bind_rows(nyc,la, all_six_cty)
> 
> p_case_sm <-
+     ggplot(sixcty, aes(x = date, y = cases, fill = period, color = county)) +
+     geom_point() +
+     geom_smooth(method = lm) +
+     scale_y_log10() +
+     ggtitle("COVID-19 Case Totals by County for Bay Area 6-County Region", subtitle = "Data from NYT (https://github.com/nytimes/covid-19-data.git)") +
+     theme_few()
>     
> p_death_sm <-
+     ggplot(sixcty, aes(x = date, y = deaths, fill = period, color = county)) +
+     geom_smooth(method = lm) +
+     geom_point() +
+     scale_y_log10() +
+     ggtitle("COVID-19 Death Totals by County for Bay Area 6-County Region", subtitle = "Data from NYT (https://github.com/nytimes/covid-19-data.git)") +
+     theme_few()
>     
> p_all_cases <-
+     ggplot(all_six_cty, aes(x = date, y = cases, fill = period)) +
+     geom_point() +
+     geom_smooth(method = lm) +
+     scale_y_log10(labels = scales::comma) +
+     ggtitle("COVID-19 Case Totals for Bay Area 6-Country Region", subtitle = "Data from NYT (https://github.com/nytimes/covid-19-data.git)") +
+     theme_few()
>     
> p_all_deaths <-
+     ggplot(all_six_cty, aes(x = date, y = deaths, fill = period)) +
+     geom_point() +
+     geom_smooth(method = lm) +
+     scale_y_log10(labels = scales::comma) +
+     ggtitle("COVID-19 Death Totals for Bay Area 6-Country Region", subtitle = "Data from NYT (https://github.com/nytimes/covid-19-data.git)") +
+     theme_few()
> 
> p_bay_la_nyc_deaths <-
+     ggplot(nyc_la_bayarea, aes(x = date, y = deaths, color = county, fill = period)) +
+     geom_point() +
+     geom_smooth(method = lm) +
+     scale_y_log10(labels = scales::comma) +
+     ggtitle("COVID-19 Death Totals for Bay Area 6-Country Region, LA & NYC", subtitle = "Data from NYT (https://github.com/nytimes/covid-19-data.git)") +
+     theme_few()
> 
> p_bay_la_nyc_cases <-
+     ggplot(nyc_la_bayarea, aes(x = date, y = cases, color = county, fill = period)) +
+     geom_point() +
+     geom_smooth(method = lm) +
+     scale_y_log10(labels=scales::comma) +
+     ggtitle("COVID-19 Case Totals for Bay Area 6-Country Region, LA & NYC", subtitle = "Data from NYT (https://github.com/nytimes/covid-19-data.git)") +
+     theme_few()
> 
> p_bay_la_nyc_new_cases <-
+     ggplot(nyc_la_bayarea, aes(x = date, y = new_cases, color = county, fill = period)) +
+     geom_point() +
+     geom_smooth(method = lm) +
+     scale_y_log10(labels=scales::comma) +
+     ggtitle("COVID-19 New Cases By Day for Bay Area 6-Country Region, LA & NYC", subtitle = "Data from NYT (https://github.com/nytimes/covid-19-data.git)") +
+     theme_few()
> 
> p_bay_la_nyc_new_deaths <-
+     ggplot(nyc_la_bayarea, aes(x = date, y = new_deaths, color = county, fill = period)) +
+     geom_point() +
+     geom_smooth(method = lm) +
+     scale_y_log10(labels=scales::comma) +
+     ggtitle("COVID-19 New Deaths By Day for Bay Area 6-Country Region, LA & NYC", subtitle = "Data from NYT (https://github.com/nytimes/covid-19-data.git)") +
+     theme_few()
> 
> 
> png("~/Desktop/bay_area_covid_by_cty.png")
> print(p_case_sm)
`geom_smooth()` using formula 'y ~ x'
> dev.off()
null device 
          1 
> 
> png("~/Desktop/bay_area_covid_d_by_cty.png")
> print(p_death_sm)
`geom_smooth()` using formula 'y ~ x'
Warning messages:
1: Transformation introduced infinite values in continuous y-axis 
2: Transformation introduced infinite values in continuous y-axis 
3: Removed 110 rows containing non-finite values (stat_smooth). 
> dev.off()
null device 
          1 
> 
> png("~/Desktop/bay_area_covid.png")
> print(p_all_cases)
`geom_smooth()` using formula 'y ~ x'
> dev.off()
null device 
          1 
> 
> png("~/Desktop/bay_area_covid_d.png")
> print(p_all_deaths)
`geom_smooth()` using formula 'y ~ x'
Warning messages:
1: Transformation introduced infinite values in continuous y-axis 
2: Transformation introduced infinite values in continuous y-axis 
3: Removed 8 rows containing non-finite values (stat_smooth). 
> dev.off()
null device 
          1 
> 
> png("~/Desktop/bay_area_covid.png")
> print(p_all_cases)
`geom_smooth()` using formula 'y ~ x'
> dev.off()
null device 
          1 
> 
> png("~/Desktop/bay_area_la_nyc_covid.png")
> print(p_bay_la_nyc_cases)
`geom_smooth()` using formula 'y ~ x'
> dev.off()
null device 
          1 
> 
> png("~/Desktop/bay_area_la_nyc_covid_d.png")
> print(p_bay_la_nyc_deaths)
`geom_smooth()` using formula 'y ~ x'
Warning messages:
1: Transformation introduced infinite values in continuous y-axis 
2: Transformation introduced infinite values in continuous y-axis 
3: Removed 31 rows containing non-finite values (stat_smooth). 
4: In qt((1 - level)/2, df) : NaNs produced
5: In max(ids, na.rm = TRUE) :
  no non-missing arguments to max; returning -Inf
> dev.off()
null device 
          1 
> 
> png("~/Desktop/bay_area_la_nyc_covid_new_cases.png")
> print(p_bay_la_nyc_new_cases)
`geom_smooth()` using formula 'y ~ x'
Warning messages:
1: Transformation introduced infinite values in continuous y-axis 
2: Transformation introduced infinite values in continuous y-axis 
3: Removed 5 rows containing non-finite values (stat_smooth). 
> dev.off()
null device 
          1 
> 
> png("~/Desktop/bay_area_la_nyc_covid_new_deaths.png")
> print(p_bay_la_nyc_new_deaths)
`geom_smooth()` using formula 'y ~ x'
Warning messages:
1: Transformation introduced infinite values in continuous y-axis 
2: Transformation introduced infinite values in continuous y-axis 
3: Removed 47 rows containing non-finite values (stat_smooth). 
4: In qt((1 - level)/2, df) : NaNs produced
5: In max(ids, na.rm = TRUE) :
  no non-missing arguments to max; returning -Inf
> dev.off()
null device 
          1 
> 
> proc.time()
   user  system elapsed 
  6.376   0.620   7.949 
